/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jsource.gui;

import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import com.jsource.dataloader.MetricsReader;
import com.jsource.dataloader.SpreadsheetReader;
import com.jsource.perfanalyzer.MetricUtils;
import com.jsource.perfanalyzer.PerformanceAnalyzer;
import com.jsource.perfanalyzer.ReportItem;
import com.jsource.projectsmanager.Project;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author k.shaposhnik
 */
public class MainWindow extends javax.swing.JFrame {

    ExcelFileFilter excelFileFilter = null;
    ProjectFileFilter projectFileFilter = null;
    Project currentProject = new Project("path/to/file");

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        // init custom components
        excelFileFilter = new ExcelFileFilter();
        projectFileFilter = new ProjectFileFilter();
        // init designer components
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customFileChooser = new javax.swing.JFileChooser();
        analyzeMethodsCheck = new javax.swing.JCheckBox();
        analyzeClassesCheck = new javax.swing.JCheckBox();
        analysisLevelLabel = new javax.swing.JLabel();
        textualRepCheck = new javax.swing.JCheckBox();
        graphicalRepCheck = new javax.swing.JCheckBox();
        reportTypeLabel = new javax.swing.JLabel();
        startAnalysisBtn = new javax.swing.JButton();
        tabsPane = new javax.swing.JTabbedPane();
        methodsTab = new javax.swing.JPanel();
        methodMetricsScroll = new javax.swing.JScrollPane();
        methodMetricsTable = new javax.swing.JTable();
        classesTab = new javax.swing.JPanel();
        classMetricsScroll = new javax.swing.JScrollPane();
        classMetricsTable = new javax.swing.JTable();
        reportTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        mainMenuBar = new javax.swing.JMenuBar();
        projectsMenu = new javax.swing.JMenu();
        newProjectMI = new javax.swing.JMenuItem();
        openMI = new javax.swing.JMenuItem();
        saveProjectMI = new javax.swing.JMenuItem();
        methodsMenu = new javax.swing.JMenu();
        loadMethodMetricsMI = new javax.swing.JMenuItem();
        clearMethodMetricsMI = new javax.swing.JMenuItem();
        classesMenu = new javax.swing.JMenu();
        loadClassMetricsMI = new javax.swing.JMenuItem();
        clearClassMetricsMI = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        exportReportMI = new javax.swing.JMenuItem();
        clearReportMI = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMI = new javax.swing.JMenuItem();

        customFileChooser.setDialogTitle("Select file with metrics");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Performance Analyzer");

        analyzeMethodsCheck.setText("Methods");
        analyzeMethodsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeMethodsCheckActionPerformed(evt);
            }
        });

        analyzeClassesCheck.setText("Classes");

        analysisLevelLabel.setText("Analysis level");

        textualRepCheck.setSelected(true);
        textualRepCheck.setText("Textual");
        textualRepCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textualRepCheckActionPerformed(evt);
            }
        });

        graphicalRepCheck.setText("Graphical");

        reportTypeLabel.setText("Report type");

        startAnalysisBtn.setText("Start analysis");
        startAnalysisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAnalysisBtnActionPerformed(evt);
            }
        });

        methodMetricsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Method name", "ATFD", "LAA", "FDP", "LOC", "CYCLO", "MAXNESTING", "NOAV", "CINT", "CDISP", "CM", "CC", "Scope name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        methodMetricsScroll.setViewportView(methodMetricsTable);

        javax.swing.GroupLayout methodsTabLayout = new javax.swing.GroupLayout(methodsTab);
        methodsTab.setLayout(methodsTabLayout);
        methodsTabLayout.setHorizontalGroup(
            methodsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(methodMetricsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );
        methodsTabLayout.setVerticalGroup(
            methodsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(methodMetricsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );

        tabsPane.addTab("Methods", methodsTab);

        classMetricsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Class name", "ATDF", "WMC", "TCC", "LOC (Total methods size)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        classMetricsScroll.setViewportView(classMetricsTable);

        javax.swing.GroupLayout classesTabLayout = new javax.swing.GroupLayout(classesTab);
        classesTab.setLayout(classesTabLayout);
        classesTabLayout.setHorizontalGroup(
            classesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(classMetricsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );
        classesTabLayout.setVerticalGroup(
            classesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(classMetricsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );

        tabsPane.addTab("Classes", classesTab);

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Level", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reportTable);

        javax.swing.GroupLayout reportTabLayout = new javax.swing.GroupLayout(reportTab);
        reportTab.setLayout(reportTabLayout);
        reportTabLayout.setHorizontalGroup(
            reportTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );
        reportTabLayout.setVerticalGroup(
            reportTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );

        tabsPane.addTab("Report", reportTab);

        projectsMenu.setText("Project");

        newProjectMI.setText("New project");
        newProjectMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMIActionPerformed(evt);
            }
        });
        projectsMenu.add(newProjectMI);

        openMI.setText("Open");
        openMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMIActionPerformed(evt);
            }
        });
        projectsMenu.add(openMI);

        saveProjectMI.setText("Save");
        saveProjectMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMIActionPerformed(evt);
            }
        });
        projectsMenu.add(saveProjectMI);

        mainMenuBar.add(projectsMenu);

        methodsMenu.setText("Methods");

        loadMethodMetricsMI.setText("Load method metrics");
        loadMethodMetricsMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMethodMetricsMIActionPerformed(evt);
            }
        });
        methodsMenu.add(loadMethodMetricsMI);

        clearMethodMetricsMI.setText("Clear list");
        clearMethodMetricsMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMethodMetricsMIActionPerformed(evt);
            }
        });
        methodsMenu.add(clearMethodMetricsMI);

        mainMenuBar.add(methodsMenu);

        classesMenu.setText("Classes");

        loadClassMetricsMI.setText("Load class metrics");
        loadClassMetricsMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadClassMetricsMIActionPerformed(evt);
            }
        });
        classesMenu.add(loadClassMetricsMI);

        clearClassMetricsMI.setText("Clear list");
        clearClassMetricsMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearClassMetricsMIActionPerformed(evt);
            }
        });
        classesMenu.add(clearClassMetricsMI);

        mainMenuBar.add(classesMenu);

        reportMenu.setText("Report");

        exportReportMI.setText("Export report");
        exportReportMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportReportMIActionPerformed(evt);
            }
        });
        reportMenu.add(exportReportMI);

        clearReportMI.setText("Clear report");
        clearReportMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearReportMIActionPerformed(evt);
            }
        });
        reportMenu.add(clearReportMI);

        mainMenuBar.add(reportMenu);

        helpMenu.setText("Help");

        aboutMI.setText("About");
        aboutMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMIActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMI);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(analysisLevelLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(analyzeMethodsCheck)
                            .addComponent(analyzeClassesCheck))))
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reportTypeLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textualRepCheck)
                            .addComponent(graphicalRepCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startAnalysisBtn)
                        .addGap(81, 81, 81))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(analysisLevelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeMethodsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(analyzeClassesCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reportTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textualRepCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(graphicalRepCheck))
                            .addComponent(startAnalysisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(tabsPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearReportMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearReportMIActionPerformed
        // clear table with class metrics
        clearTableContent(reportTable);
        currentProject.getReport().clear();
    }//GEN-LAST:event_clearReportMIActionPerformed

    private void newProjectMIActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newProjectMIActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_newProjectMIActionPerformed

    private void exportReportMIActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exportReportMIActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_exportReportMIActionPerformed

    private void analyzeMethodsCheckActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_analyzeMethodsCheckActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_analyzeMethodsCheckActionPerformed

    private void textualRepCheckActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_textualRepCheckActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_textualRepCheckActionPerformed

    private void startAnalysisBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startAnalysisBtnActionPerformed
        //determine analysis level
        boolean methodsAnalysisRequested = analyzeMethodsCheck.isSelected();
        boolean classesAnalysisRequested = analyzeClassesCheck.isSelected();

        PerformanceAnalyzer analyzer = new PerformanceAnalyzer();

        //analyze methods
        List<ReportItem> methodsReport = new ArrayList<ReportItem>();
        if (methodsAnalysisRequested) {
            methodsReport = analyzer.analyzePerformanceForMethods(currentProject.getMethodMetrics());

        }

        //analyze classes
        List<ReportItem> classesReport = new ArrayList<ReportItem>();
        if (classesAnalysisRequested) {
            classesReport = analyzer.analyzePerformanceForClasses(currentProject.getClassMetrics());
        }

        //add analysis result to project report (if any results exist)
        if (methodsReport.isEmpty() && classesReport.isEmpty()) {
            System.out.println("No analysis results!");
        } else {
            //update report in current project
            currentProject.getReport().clear();
            currentProject.getReport().addAll(methodsReport);
            currentProject.getReport().addAll(classesReport);

            //update report in UI
            clearTableContent(reportTable);
            DefaultTableModel tableModel = (DefaultTableModel) reportTable
                    .getModel();

            int rowsCount = 0;
            for (ReportItem repItem : currentProject.getReport()) {
                if (repItem != null) {
                    String[] newRow = new String[]{repItem.getName(), repItem.getLevel(), repItem.getDescription()};
                    tableModel.insertRow(rowsCount, newRow);
                    rowsCount++;
                }

            }
        }

    }// GEN-LAST:event_startAnalysisBtnActionPerformed

    private void openMIActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openMIActionPerformed
        String filePath = selectFile(FileFormat.PROJECT);
    }// GEN-LAST:event_openMIActionPerformed

    private void saveProjectMIActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveProjectMIActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_saveProjectMIActionPerformed

    private void loadMethodMetricsMIActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadMethodMetricsMIActionPerformed
        // select file with metrics
        String filePath = selectFile(FileFormat.EXCEL);

        //load metrics
        MetricsReader metricsReader = new SpreadsheetReader();
        String[][] metrics = metricsReader.readMetrics(
                MetricUtils.getMethodMetricNames(), filePath);

        // update table with class level metrics
        clearTableContent(methodMetricsTable);
        DefaultTableModel tableModel = (DefaultTableModel) methodMetricsTable
                .getModel();
        for (int i = 0; i < metrics.length; i++) {
            tableModel.insertRow(i, metrics[i]);
        }

        //update current project
        currentProject.setMethodMetrics(metrics);

    }// GEN-LAST:event_loadMethodMetricsMIActionPerformed

    private void clearMethodMetricsMIActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_clearMethodMetricsMIActionPerformed
        // clear table with method metrics
        clearTableContent(methodMetricsTable);
        currentProject.setMethodMetrics(null);
    }// GEN-LAST:event_clearMethodMetricsMIActionPerformed

    private void loadClassMetricsMIActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadClassMetricsMIActionPerformed
        // select file with metrics
        String filePath = selectFile(FileFormat.EXCEL);

        // load metrics
        MetricsReader metricsReader = new SpreadsheetReader();
        String[][] metrics = metricsReader.readMetrics(
                MetricUtils.getClassMetricNames(), filePath);

        // update table with class level metrics
        clearTableContent(classMetricsTable);
        DefaultTableModel tableModel = (DefaultTableModel) classMetricsTable
                .getModel();
        for (int i = 0; i < metrics.length; i++) {
            tableModel.insertRow(i, metrics[i]);
        }

        //update current project
        currentProject.setClassMetrics(metrics);

    }// GEN-LAST:event_loadClassMetricsMIActionPerformed

    private void clearClassMetricsMIActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_clearClassMetricsMIActionPerformed
        // clear table with class metrics
        clearTableContent(classMetricsTable);
        currentProject.setClassMetrics(null);
    }// GEN-LAST:event_clearClassMetricsMIActionPerformed

    private void aboutMIActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_aboutMIActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_aboutMIActionPerformed

    /**
     * Clears content of table.
     *
     * @param table Table
     */
    public void clearTableContent(final JTable table) {
        if (table != null) {
            for (int i = 0; i < table.getRowCount(); i++) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    table.setValueAt("", i, j);
                }
            }
        } else {
            System.out.println("Table is null!");
        }

    }

    /**
     * Enables user select file in file system.
     *
     * @param fileFormat Format of files to filter
     * @return Absolute path to selected file
     *
     *
     */
    public String selectFile(FileFormat fileFormat) {
        String selectedFilePath = null;

        // set file format filter
        int format = fileFormat.getValue();
        if (format == FileFormat.EXCEL.getValue()) {
            customFileChooser.setFileFilter(excelFileFilter);
        } else if (format == FileFormat.PROJECT.getValue()) {
            customFileChooser.setFileFilter(projectFileFilter);
        }

        int dialogReturn = customFileChooser.showOpenDialog(this);
        // check if file was selected
        if (dialogReturn == JFileChooser.APPROVE_OPTION) {
            File file = customFileChooser.getSelectedFile();
            selectedFilePath = file.getAbsolutePath();
            System.out.println("Selected file: " + selectedFilePath);
        } else {
            System.out.println("File access cancelled by user");
        }

        return selectedFilePath;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
	/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMI;
    private javax.swing.JLabel analysisLevelLabel;
    private javax.swing.JCheckBox analyzeClassesCheck;
    private javax.swing.JCheckBox analyzeMethodsCheck;
    private javax.swing.JScrollPane classMetricsScroll;
    private javax.swing.JTable classMetricsTable;
    private javax.swing.JMenu classesMenu;
    private javax.swing.JPanel classesTab;
    private javax.swing.JMenuItem clearClassMetricsMI;
    private javax.swing.JMenuItem clearMethodMetricsMI;
    private javax.swing.JMenuItem clearReportMI;
    private javax.swing.JFileChooser customFileChooser;
    private javax.swing.JMenuItem exportReportMI;
    private javax.swing.JCheckBox graphicalRepCheck;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem loadClassMetricsMI;
    private javax.swing.JMenuItem loadMethodMetricsMI;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JScrollPane methodMetricsScroll;
    private javax.swing.JTable methodMetricsTable;
    private javax.swing.JMenu methodsMenu;
    private javax.swing.JPanel methodsTab;
    private javax.swing.JMenuItem newProjectMI;
    private javax.swing.JMenuItem openMI;
    private javax.swing.JMenu projectsMenu;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JPanel reportTab;
    private javax.swing.JTable reportTable;
    private javax.swing.JLabel reportTypeLabel;
    private javax.swing.JMenuItem saveProjectMI;
    private javax.swing.JButton startAnalysisBtn;
    private javax.swing.JTabbedPane tabsPane;
    private javax.swing.JCheckBox textualRepCheck;
    // End of variables declaration//GEN-END:variables
}
